// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/template/tracespan/tracespan_instance.proto

/*
	Package tracespan is a generated protocol buffer package.

	It is generated from these files:
		mixer/template/tracespan/tracespan_instance.proto

	It has these top-level messages:
		Type
		InstanceParam
*/
package tracespan

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "istio.io/api/mixer/adapter/model/v1beta1"
import istio_policy_v1beta1 "istio.io/api/policy/v1beta1"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TraceSpan represents an individual span within a distributed trace.
//
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference/config/mixer/expression-language.html). Please note that if the datatype of a field is not istio.mixer.adapter.model.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference/config/mixer/expression-language.html#type-checking) must match the datatype of the field.
//
// Example config:
// ```
// apiVersion: "config.istio.io/v1alpha2"
// kind: tracespan
// metadata:
//   name: default
//   namespace: istio-system
// spec:
//   traceId: request.headers["x-b3-traceid"]
//   spanId: request.headers["x-b3-spanid"] | ""
//   parentSpanId: request.headers["x-b3-parentspanid"] | ""
//   spanName: request.path | "/"
//   startTime: request.time
//   endTime: response.time
//   spanTags:
//     http.method: request.method | ""
//     http.status_code: response.code | 200
//     http.url: request.path | ""
//     request.size: request.size | 0
//     response.size: response.size | 0
//     source.ip: source.ip | ip("0.0.0.0")
//     source.service: source.service | ""
//     source.user: source.user | ""
//     source.version: source.labels["version"] | ""
// ```
//
// See also: [Distributed Tracing](https://istio.io/docs/tasks/telemetry/distributed-tracing.html)
// for information on tracing within Istio.
type Type struct {
	// Span tags are a set of <key, value> pairs that provide metadata for the
	// entire span. The values can be specified in the form of expressions.
	//
	// Optional.
	SpanTags map[string]istio_policy_v1beta1.ValueType `protobuf:"bytes,7,rep,name=span_tags,json=spanTags" json:"span_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=istio.policy.v1beta1.ValueType"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptorTracespanInstance, []int{0} }

func (m *Type) GetSpanTags() map[string]istio_policy_v1beta1.ValueType {
	if m != nil {
		return m.SpanTags
	}
	return nil
}

type InstanceParam struct {
	TraceId      string            `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId       string            `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentSpanId string            `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	SpanName     string            `protobuf:"bytes,4,opt,name=span_name,json=spanName,proto3" json:"span_name,omitempty"`
	StartTime    string            `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string            `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SpanTags     map[string]string `protobuf:"bytes,7,rep,name=span_tags,json=spanTags" json:"span_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *InstanceParam) Reset()                    { *m = InstanceParam{} }
func (*InstanceParam) ProtoMessage()               {}
func (*InstanceParam) Descriptor() ([]byte, []int) { return fileDescriptorTracespanInstance, []int{1} }

func (m *InstanceParam) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *InstanceParam) GetSpanId() string {
	if m != nil {
		return m.SpanId
	}
	return ""
}

func (m *InstanceParam) GetParentSpanId() string {
	if m != nil {
		return m.ParentSpanId
	}
	return ""
}

func (m *InstanceParam) GetSpanName() string {
	if m != nil {
		return m.SpanName
	}
	return ""
}

func (m *InstanceParam) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *InstanceParam) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *InstanceParam) GetSpanTags() map[string]string {
	if m != nil {
		return m.SpanTags
	}
	return nil
}

func init() {
	proto.RegisterType((*Type)(nil), "tracespan.Type")
	proto.RegisterType((*InstanceParam)(nil), "tracespan.InstanceParam")
}
func (this *Type) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Type)
	if !ok {
		that2, ok := that.(Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SpanTags) != len(that1.SpanTags) {
		return false
	}
	for i := range this.SpanTags {
		if this.SpanTags[i] != that1.SpanTags[i] {
			return false
		}
	}
	return true
}
func (this *InstanceParam) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceParam)
	if !ok {
		that2, ok := that.(InstanceParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TraceId != that1.TraceId {
		return false
	}
	if this.SpanId != that1.SpanId {
		return false
	}
	if this.ParentSpanId != that1.ParentSpanId {
		return false
	}
	if this.SpanName != that1.SpanName {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if len(this.SpanTags) != len(that1.SpanTags) {
		return false
	}
	for i := range this.SpanTags {
		if this.SpanTags[i] != that1.SpanTags[i] {
			return false
		}
	}
	return true
}
func (this *Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracespan.Type{")
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]istio_policy_v1beta1.ValueType{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%#v: %#v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	if this.SpanTags != nil {
		s = append(s, "SpanTags: "+mapStringForSpanTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstanceParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tracespan.InstanceParam{")
	s = append(s, "TraceId: "+fmt.Sprintf("%#v", this.TraceId)+",\n")
	s = append(s, "SpanId: "+fmt.Sprintf("%#v", this.SpanId)+",\n")
	s = append(s, "ParentSpanId: "+fmt.Sprintf("%#v", this.ParentSpanId)+",\n")
	s = append(s, "SpanName: "+fmt.Sprintf("%#v", this.SpanName)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]string{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%#v: %#v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	if this.SpanTags != nil {
		s = append(s, "SpanTags: "+mapStringForSpanTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTracespanInstance(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpanTags) > 0 {
		for k, _ := range m.SpanTags {
			dAtA[i] = 0x3a
			i++
			v := m.SpanTags[k]
			mapSize := 1 + len(k) + sovTracespanInstance(uint64(len(k))) + 1 + sovTracespanInstance(uint64(v))
			i = encodeVarintTracespanInstance(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTracespanInstance(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintTracespanInstance(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *InstanceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTracespanInstance(dAtA, i, uint64(len(m.TraceId)))
		i += copy(dAtA[i:], m.TraceId)
	}
	if len(m.SpanId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTracespanInstance(dAtA, i, uint64(len(m.SpanId)))
		i += copy(dAtA[i:], m.SpanId)
	}
	if len(m.ParentSpanId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTracespanInstance(dAtA, i, uint64(len(m.ParentSpanId)))
		i += copy(dAtA[i:], m.ParentSpanId)
	}
	if len(m.SpanName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTracespanInstance(dAtA, i, uint64(len(m.SpanName)))
		i += copy(dAtA[i:], m.SpanName)
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTracespanInstance(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTracespanInstance(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.SpanTags) > 0 {
		for k, _ := range m.SpanTags {
			dAtA[i] = 0x3a
			i++
			v := m.SpanTags[k]
			mapSize := 1 + len(k) + sovTracespanInstance(uint64(len(k))) + 1 + len(v) + sovTracespanInstance(uint64(len(v)))
			i = encodeVarintTracespanInstance(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTracespanInstance(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTracespanInstance(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintTracespanInstance(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Type) Size() (n int) {
	var l int
	_ = l
	if len(m.SpanTags) > 0 {
		for k, v := range m.SpanTags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracespanInstance(uint64(len(k))) + 1 + sovTracespanInstance(uint64(v))
			n += mapEntrySize + 1 + sovTracespanInstance(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *InstanceParam) Size() (n int) {
	var l int
	_ = l
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovTracespanInstance(uint64(l))
	}
	l = len(m.SpanId)
	if l > 0 {
		n += 1 + l + sovTracespanInstance(uint64(l))
	}
	l = len(m.ParentSpanId)
	if l > 0 {
		n += 1 + l + sovTracespanInstance(uint64(l))
	}
	l = len(m.SpanName)
	if l > 0 {
		n += 1 + l + sovTracespanInstance(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovTracespanInstance(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovTracespanInstance(uint64(l))
	}
	if len(m.SpanTags) > 0 {
		for k, v := range m.SpanTags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracespanInstance(uint64(len(k))) + 1 + len(v) + sovTracespanInstance(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracespanInstance(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTracespanInstance(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTracespanInstance(x uint64) (n int) {
	return sovTracespanInstance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Type) String() string {
	if this == nil {
		return "nil"
	}
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]istio_policy_v1beta1.ValueType{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%v: %v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	s := strings.Join([]string{`&Type{`,
		`SpanTags:` + mapStringForSpanTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceParam) String() string {
	if this == nil {
		return "nil"
	}
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]string{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%v: %v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	s := strings.Join([]string{`&InstanceParam{`,
		`TraceId:` + fmt.Sprintf("%v", this.TraceId) + `,`,
		`SpanId:` + fmt.Sprintf("%v", this.SpanId) + `,`,
		`ParentSpanId:` + fmt.Sprintf("%v", this.ParentSpanId) + `,`,
		`SpanName:` + fmt.Sprintf("%v", this.SpanName) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`SpanTags:` + mapStringForSpanTags + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTracespanInstance(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracespanInstance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanTags == nil {
				m.SpanTags = make(map[string]istio_policy_v1beta1.ValueType)
			}
			var mapkey string
			var mapvalue istio_policy_v1beta1.ValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracespanInstance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanInstance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracespanInstance
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanInstance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (istio_policy_v1beta1.ValueType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracespanInstance(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTracespanInstance
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpanTags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracespanInstance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracespanInstance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentSpanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanTags == nil {
				m.SpanTags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracespanInstance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanInstance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracespanInstance
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanInstance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracespanInstance
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracespanInstance(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTracespanInstance
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpanTags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracespanInstance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracespanInstance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTracespanInstance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTracespanInstance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracespanInstance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTracespanInstance
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTracespanInstance
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTracespanInstance(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTracespanInstance = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTracespanInstance   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("mixer/template/tracespan/tracespan_instance.proto", fileDescriptorTracespanInstance)
}

var fileDescriptorTracespanInstance = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x6b, 0x13, 0x41,
	0x14, 0xc6, 0x33, 0x49, 0x9b, 0x74, 0x47, 0x5b, 0x64, 0x11, 0x5c, 0x23, 0x9d, 0x86, 0x22, 0x92,
	0x83, 0xec, 0x92, 0x88, 0x20, 0xf5, 0xa6, 0x78, 0xc8, 0x45, 0x24, 0x0d, 0x9e, 0x84, 0xe5, 0x35,
	0xfb, 0x28, 0x83, 0xd9, 0xd9, 0x61, 0xe6, 0x59, 0xba, 0x37, 0xff, 0x04, 0xc1, 0x7f, 0xc0, 0xa3,
	0x7f, 0x87, 0x27, 0x8f, 0xc5, 0x93, 0x47, 0xb3, 0x7a, 0xf0, 0xd8, 0xa3, 0x47, 0xd9, 0x99, 0x35,
	0x26, 0x88, 0xf4, 0x36, 0x6f, 0xbe, 0x6f, 0xf6, 0xfb, 0xde, 0x8f, 0xe5, 0xa3, 0x5c, 0x9e, 0xa3,
	0x49, 0x08, 0x73, 0xbd, 0x00, 0xc2, 0x84, 0x0c, 0xcc, 0xd1, 0x6a, 0x50, 0x7f, 0x4f, 0xa9, 0x54,
	0x96, 0x40, 0xcd, 0x31, 0xd6, 0xa6, 0xa0, 0x22, 0x0c, 0x56, 0x4a, 0xff, 0xbe, 0x7f, 0x0d, 0x19,
	0x68, 0x42, 0x93, 0xe4, 0x45, 0x86, 0x8b, 0xe4, 0x6c, 0x74, 0x82, 0x04, 0xa3, 0x04, 0xcf, 0x09,
	0x95, 0x95, 0x85, 0xb2, 0xfe, 0x61, 0xff, 0x40, 0x17, 0x0b, 0x39, 0x2f, 0x57, 0x86, 0x33, 0x58,
	0xbc, 0xc1, 0x94, 0x4a, 0xdd, 0x7c, 0xf9, 0xf0, 0x03, 0xe3, 0x5b, 0xb3, 0x52, 0x63, 0x78, 0xc4,
	0x03, 0x97, 0x4c, 0x70, 0x6a, 0xa3, 0xde, 0xa0, 0x33, 0xbc, 0x36, 0xde, 0x8f, 0x57, 0xb1, 0x71,
	0xed, 0x89, 0x8f, 0x35, 0xa8, 0x19, 0x9c, 0xda, 0x67, 0x8a, 0x4c, 0x39, 0xdd, 0xb1, 0xcd, 0xd8,
	0x7f, 0xc5, 0x77, 0x37, 0xa4, 0xf0, 0x06, 0xef, 0xbc, 0xc6, 0x32, 0x62, 0x03, 0x36, 0x0c, 0xa6,
	0xf5, 0x31, 0x7c, 0xc8, 0xb7, 0x5d, 0x76, 0xd4, 0x1e, 0xb0, 0xe1, 0xde, 0xf8, 0x20, 0x96, 0x96,
	0x64, 0x11, 0xfb, 0x7a, 0x71, 0x53, 0x2f, 0x7e, 0x59, 0x5b, 0xea, 0xa8, 0xa9, 0x77, 0x1f, 0xb5,
	0x1f, 0xb1, 0xc3, 0x4f, 0x6d, 0xbe, 0x3b, 0x69, 0x78, 0xbc, 0x00, 0x03, 0x79, 0x78, 0x9b, 0xef,
	0xb8, 0x66, 0xa9, 0xcc, 0x9a, 0x8c, 0x9e, 0x9b, 0x27, 0x59, 0x78, 0x8b, 0xf7, 0x3c, 0xc0, 0xcc,
	0x25, 0x05, 0xd3, 0x6e, 0x3d, 0x4e, 0xb2, 0xf0, 0x2e, 0xdf, 0xd3, 0x60, 0x50, 0x51, 0xfa, 0x47,
	0xef, 0x38, 0xfd, 0xba, 0xbf, 0x3d, 0xf6, 0xae, 0x3b, 0x0d, 0x05, 0x05, 0x39, 0x46, 0x5b, 0xce,
	0xe0, 0xd6, 0x7c, 0x0e, 0x39, 0x86, 0xfb, 0x9c, 0x5b, 0x02, 0x43, 0x29, 0xc9, 0x1c, 0xa3, 0x6d,
	0xa7, 0x06, 0xee, 0x66, 0x26, 0x73, 0xac, 0x5b, 0xa1, 0xca, 0xbc, 0xd8, 0xf5, 0xad, 0x50, 0x65,
	0x4e, 0x7a, 0xfa, 0x2f, 0xdc, 0x7b, 0x6b, 0x70, 0x37, 0xb6, 0xfb, 0x2f, 0xe5, 0xc7, 0x57, 0x53,
	0xbe, 0xb9, 0x4e, 0x39, 0x58, 0x83, 0xf8, 0x64, 0x7c, 0xb1, 0x14, 0xad, 0xaf, 0x4b, 0xd1, 0xba,
	0x5c, 0x0a, 0xf6, 0xb6, 0x12, 0xec, 0x63, 0x25, 0xd8, 0xe7, 0x4a, 0xb0, 0x8b, 0x4a, 0xb0, 0x6f,
	0x95, 0x60, 0x3f, 0x2b, 0xd1, 0xba, 0xac, 0x04, 0x7b, 0xf7, 0x5d, 0xb4, 0x7e, 0x7d, 0xf9, 0xf1,
	0xbe, 0xcd, 0x4e, 0xba, 0xee, 0x17, 0x79, 0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x55, 0x7f, 0x1d,
	0x0f, 0xb1, 0x02, 0x00, 0x00,
}
