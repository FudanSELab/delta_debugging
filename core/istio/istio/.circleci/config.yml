version: 2

# Docker environment.
defaults: &defaults
  working_directory: /go/src/istio.io/istio
  docker:
    - image: istio/ci:go1.10-k8s1.9-helm2.7.2-minikube0.25
  environment:
    GOPATH: /go

# org context settings. If developing on a clone, please configure:

# DOCKER_USER
# DOCKER_PASS
# HUB: ex istio, costinm (it is not the hub, but the dockerhub org or user)

# VM environment. Includes docker.
integrationDefaults: &integrationDefaults
  machine: true
  working_directory: /go/src/istio.io/istio #same as docker
  environment:
    CHANGE_MINIKUBE_NONE_USER: true
    HUB: docker.io/dnerepo
    TAG: dontpush
    GOPATH: /go

jobs:
  e2e-simple:
    <<: *integrationDefaults
    environment:
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - GOPATH: /go
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
          mkdir -p /go/out
          mkdir /home/circleci/logs
      - checkout
      - run: make submodule-sync
      - attach_workspace:
          at:  /go
      - run: bin/testEnvRootMinikube.sh start
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build test-bins
            fi
            make docker.tag generate_yaml
      - run: bin/testEnvRootMinikube.sh wait
      - run: docker images
      - run: PATH=$GOPATH/bin:$PATH make e2e_simple_run E2E_ARGS="--skip_cleanup -use_local_cluster -cluster_wide -alsologtostderr -test.v -v 2"
      - store_artifacts:
          path: /home/circleci/logs
      - store_artifacts:
          path: /tmp

  e2e-mixer:
    <<: *integrationDefaults
    environment:
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - GOPATH: /go
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
          mkdir -p /go/out
          mkdir /home/circleci/logs
      - checkout
      - run: make submodule-sync
      - attach_workspace:
          at:  /go
      - run: ls -R /go # Debug attach_workspace, pkg must be restored.
      - run: bin/testEnvRootMinikube.sh start
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build test-bins
            fi
            make docker.tag generate_yaml
      - run: bin/testEnvRootMinikube.sh wait
      - run: docker images
      - run:
            no_output_timeout: 20m
            # Run the test even if previous failed
            when: always
            command: |
                  make e2e_mixer E2E_ARGS="--skip_cleanup -use_local_cluster -cluster_wide -alsologtostderr -test.v -v 2"
      - store_artifacts:
          path: /home/circleci/logs
      - store_artifacts:
          path: /tmp

  e2e-bookinfo:
    <<: *integrationDefaults
    environment:
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - GOPATH: /go
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
          mkdir -p /home/circleci/logs
      - checkout
      - run: make submodule-sync
      - attach_workspace:
          at:  /go
      - run: bin/testEnvRootMinikube.sh start
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build test-bins
            fi
            make docker.tag generate_yaml
      - run: bin/testEnvRootMinikube.sh wait
      - run: docker images
      - run:
            no_output_timeout: 20m
            when: always
            command: |
              make e2e_bookinfo E2E_ARGS="--skip_cleanup -use_local_cluster -cluster_wide -alsologtostderr -test.v -v 2"
      - store_artifacts:
          path: /home/circleci/logs
      - store_artifacts:
          path: /tmp

  e2e-pilot:
    <<: *integrationDefaults
    environment:
            - GOPATH: /go
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - HUB: docker.io/dnerepo
            - TAG: dontpush
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
          mkdir -p /home/circleci/logs
      - checkout
      - run: make git.pullmaster
      - run: make submodule-sync
      - attach_workspace:
          at:  /go
      - run: bin/testEnvRootMinikube.sh start
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build test-bins
            fi
            make docker.tag generate_yaml
      - run: bin/testEnvRootMinikube.sh wait
      - run: docker images
      - run:
          command: |
            mkdir -p /go/out/tests
            trap "/go/bin/go-junit-report </go/out/tests/go-test-report.out > /go/out/tests/go-test-report.xml" EXIT
            # Run the tests in env similar with recommended setup.
            make test/minikube/auth/e2e_pilot HUB="${HUB}" TAG="${TAG}" \
               | tee -a /go/out/tests/go-test-report.out
      - run:
          name: dumpsys
          when: always
          command: |
            # TODO: move to a make target 'dumpsys'.
            kubectl get all -o wide --all-namespaces
            kubectl cluster-info dump > /go/out/logs/cluster-info.dump.txt
            kubectl describe pods -n istio-system > /go/out/logs/pods-system.txt
            kubectl describe pods -n istio-test > /go/out/logs/pods-test.txt
      - store_artifacts:
          path: /go/out/tests
      - store_artifacts:
          path: /go/out/logs
      - store_artifacts:
          path: /tmp
      - store_test_results:
          path: /go/out/tests


  e2e-pilot-noauth:
    <<: *integrationDefaults
    environment:
            - GOPATH: /go
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - HUB: docker.io/dnerepo
            - TAG: dontpush
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
          mkdir -p /home/circleci/logs
      - checkout
      - run: make submodule-sync
      - attach_workspace:
          at:  /go
      - run: bin/testEnvRootMinikube.sh start
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build test-bins
            fi
            make docker.tag generate_yaml
      - run: bin/testEnvRootMinikube.sh wait
      - run: docker images
      - run: make e2e_pilot HUB="${HUB}" TAG="${TAG}" TESTOPTS="--logtostderr --skip-cleanup -mixer=true -auth=disable -errorlogsdir=/home/circleci/logs  -use-sidecar-injector=false --core-files-dir=/home/circleci/logs"
      - store_artifacts:
          path: /home/circleci/logs

  e2e-pilot-v1alpha1-and-v1alpha2:
    <<: *integrationDefaults
    environment:
            - GOPATH: /go
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - HUB: docker.io/dnerepo
            - TAG: dontpush
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
          mkdir -p /home/circleci/logs
      - checkout
      - attach_workspace:
          at:  /go
      - run: bin/testEnvRootMinikube.sh start
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.lock" }}
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build test-bins
            fi
            make docker.tag generate_yaml
      - run: bin/testEnvRootMinikube.sh wait
      - run: docker images
      - run: make e2e_pilot HUB="${HUB}" TAG="${TAG}" TESTOPTS="--logtostderr --skip-cleanup -mixer=true -auth=enable -v1alpha2=true -v1alpha1=true -errorlogsdir=/home/circleci/logs -use-sidecar-injector=false --core-files-dir=/home/circleci/logs"
      - store_artifacts:
          path: /home/circleci/logs

  # Run nightly, to verify 'dep update' works
  depupdate:
    <<: *defaults
    steps:
      - checkout
      - run: make submodule-sync
      - run: make depend.status # check before any change
      - run: make depend.update
      - run: ( cd vendor ; git status  ) # just to see what changes
      - run: make init build
      - run:
          name: Status and artifacts
          command: make depend.status
      - store_artifacts:
          path: vendor/Gopkg.lock
      - store_artifacts:
          path: /go/out/dep.dot
      # TODO: auto-commit Gopkg.lock if test is successful

  # Runs first, will download any dependencies - currently envoy, and do any work
  # that can be shared between build/test/lint.
  dependencies:
    <<: *defaults
    steps:
      - checkout
      - run: make git.pullmaster
      - run: make submodule-sync
      - run: make init
      - run:
            command: |
              date '+%Y-%W-%D' > /go/out/cache.stamp

      - persist_to_workspace:
          root: /go
          paths:
            - src
            - bin
            - out

  codecov:
    <<: *defaults
    resource_class: xlarge
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
      ISTIO_BIN: /go/bin
    steps:
      - checkout
      - run: make submodule-sync
      - run: mkdir -p /tmp/coverage
      - run:
          name: Running Kubernetes API Server standalone
          command: make localTestEnv
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh pilot
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash) -F pilot
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh security/pkg
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh security/cmd
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash) -F security
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh broker
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash) -F broker
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh mixer
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash) -F mixer

  test:
    <<: *defaults
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
    resource_class: xlarge
    steps:
      - attach_workspace:
          at:  /go
      - restore_cache:
          keys:
            - test_cache_{{ checksum "/go/out/cache.stamp" }}
      #- checkout
      #- run: make git.pullmaster
      #- run: make submodule-sync
      - run:
          command: |
            mkdir -p /go/out/tests
            trap "go-junit-report </go/out/tests/go-test-report.out > /go/out/tests/go-test-report.xml" EXIT
            make localTestEnv
            make test T=-v | tee -a /go/out/tests/go-test-report.out
      - store_test_results:
          path: /go/out/tests
      - save_cache:
          key: test_cache_{{ checksum "/go/out/cache.stamp" }}
          paths:
            - /go/pkg


  racetest:
    <<: *defaults
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
      RACE_TEST: 1
    resource_class: xlarge
    steps:
      - checkout
      - run: make submodule-sync
      - run:
          command: |
            mkdir -p /go/out/racetests
            trap "go-junit-report </go/out/racetests/go-racetest-report.out > /go/out/racetests/go-racetest-report.xml" EXIT
            make localTestEnv
            make -k pilot-racetest mixer-racetest broker-racetest security-racetest T=-v | tee -a /go/out/racetests/go-racetest-report.out
      - store_test_results:
          path: /go/out/racetests

  benchcheck:
    <<: *defaults
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
    steps:
      - checkout
      - run: make submodule-sync
      - run:
          command: |
            mkdir -p /go/out/benchcheck
            make benchcheck | tee -a /go/out/benchcheck/go-benchcheck-report.out
      - store_test_results:
          path: /go/out/benchcheck

  build:
    <<: *defaults
    resource_class: xlarge
    steps:
      - attach_workspace:
          at:  /go
      - restore_cache:
          keys:
            - build_cache_{{ checksum "/go/out/cache.stamp" }}
      #- checkout
      #- run: make git.pullmaster
      #- run: make submodule-sync
      - run:
          command: |
            cd /go/src/istio.io/istio
            make build test-bins
      - persist_to_workspace:
          root: /go
          paths:
            # pkg may include 'dep'
            - pkg/linux_amd64
            - bin
            - out
      - run:  make sidecar.deb
      - save_cache:
          key: build_cache_{{ checksum "/go/out/cache.stamp" }}
          paths:
            - /go/pkg
      - store_artifacts:
          path: /go/out/istio-sidecar.deb

  lint:
    <<: *defaults
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
    resource_class: xlarge
    steps:
      - attach_workspace:
          at:  /go
      - restore_cache:
          keys:
            - lint_cache_{{ checksum "/go/out/cache.stamp" }}

      #- checkout
      #- run: make submodule-sync
      - run: make lint
      - save_cache:
          key: lint_cache_{{ checksum "/go/out/cache.stamp" }}
          paths:
            - /go/pkg

  docker-push:
    <<: *defaults
    resource_class: xlarge
    environment:
      TAG: circleci-nightly
    steps:
      - checkout
      - run: make submodule-sync
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            if [ ! -z "${DOCKER_USER}" ] ; then
              echo "Pushing docker images"
              docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
              make docker push
            fi

  goxbuild:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - run: make submodule-sync
      - run:
          command: |
            cp -a /usr/local/go /go
            export PATH=/go/go/bin:$PATH
            export GOROOT=/go/go
            cd /go/src/istio.io/istio
            make build GOOS=darwin KUBECONFIG=/go/src/istio.io/istio/.circleci/config
            make build GOOS=linux GOARCH=arm KUBECONFIG=/go/src/istio.io/istio/.circleci/config
      - store_artifacts:
          path: /go/bin

workflows:
  version: 2
  nightly:
    triggers:
       - schedule:
           cron: "0 0 * * *"
           filters:
             branches:
               only:
                 - master
    jobs: #daisy chained steps ending with docker push
      - depupdate
      - dependencies
      - build:
          requires:
            - dependencies
      - test:
          requires:
            - dependencies
            - build
      - e2e-simple:
          requires:
            - test
      - e2e-bookinfo:
          requires:
            - test
      - e2e-mixer:
          requires:
            - test
      - e2e-pilot:
          requires:
            - test
      - e2e-pilot-noauth:
          requires:
            - test
      - benchcheck:
          requires:
            - test
      # Compile for mac and arm
      - goxbuild:
          requires:
            - test
      # Push to dockerhub
      - docker-push:
          context: org-global
          requires:
            - e2e-simple
            - e2e-pilot
            - e2e-pilot-noauth

  periodic:
    triggers:
       - schedule:
           cron: "20 1,4,7,10,13,16,19,22 * * *"
           filters:
             branches:
               only:
                 - master
    jobs:
      - depupdate
      - dependencies
      - build:
          requires:
            - dependencies
      - test:
          requires:
            - dependencies
      - e2e-simple:
          requires:
            - build
      - e2e-bookinfo:
          requires:
            - build
      - e2e-pilot-v1alpha1-and-v1alpha2:
          requires:
            - build
      - e2e-pilot-noauth:
          requires:
            - build
      - benchcheck:
          requires:
            - test

  flaky:
    triggers:
       - schedule:
           cron: "20 2,8,14,20 * * *"
           filters:
             branches:
               only:
                 - master
    jobs:
      - depupdate
      - dependencies
      - build:
          requires:
            - dependencies
      - codecov:
          requires:
            - build
      - racetest:
          requires:
            - dependencies
      - e2e-mixer:
          requires:
            - build


  all:
    jobs:
      - dependencies
      - lint:
          requires:
            - dependencies
      - build:
          requires:
            - dependencies
      - test:
          requires:
            - dependencies
      - e2e-pilot:
          requires:
            - build
      - e2e-simple:
          requires:
            - build
